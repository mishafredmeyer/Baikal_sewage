ppcp_PI_model <- lm(log10(ppcp_sum) ~ log10(distance_weighted_population),
data = ppcp_meta_dist)
# View model results
summary(ppcp_PI_model)
# Plot linear model
ppcp_PI_plot <- ggplot(data = ppcp_meta_dist,
aes(x = log10(distance_weighted_population),
y =  log10(ppcp_sum))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("log10([Total PPCP])") +
xlab("log10(IDW Population)") +
ggtitle("PPCP vs. IDW Population") +
annotate(geom = "label", x = 3.5, y = -2.65,
label = paste("p-value: ",
round(summary(ppcp_PI_model)$coefficients[2, 4], 3),
"\nR-squared: ",
round(summary(ppcp_PI_model)$r.squared, 3)),
parse = FALSE) +
theme_minimal()
# Export plot
ggsave(filename = "../figures/ppcp_PI_plot.png", plot = ppcp_PI_plot,
device = "png", width = 18, height = 12, units = "in")
# 4. Nutrient analysis ----------------------------------------------------
# Join PPCP data with metadata/distance and create custom metric
nutrients_meta_dist <- full_join(x = nutrients, y = metadata_dist, by = "site")
# 4.1 Phosphorus ----------------------------------------------------------
# Analyze phosphorus as a function of population intensity
phosphorus_PI_model <- lm(log10(mean_tp_mg_dm3) ~ log10(distance_weighted_population),
data = nutrients_meta_dist)
# View model results
summary(phosphorus_PI_model)
# Plot linear model
phosphorus_PI_plot <- ggplot(data = nutrients_meta_dist,
aes(x = log10(distance_weighted_population),
y = log10(mean_tp_mg_dm3))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("log10([Total Phosphorus])") +
xlab("log10(IDW Population)") +
ggtitle("Phosphorus vs. IDW Population") +
annotate(geom = "label", x = 3.0, y = -1.45,
label = paste0("p-value: ",
round(summary(phosphorus_PI_model)$coefficients[2, 4], 3),
"\nR-squared: ",
round(summary(phosphorus_PI_model)$r.squared, 3))) +
theme_minimal()
# Export plot
ggsave("phosphorus_PI_plot.png", phosphorus_PI_plot, device = "png",
path = "../figures", width = 18, height = 12, units = "in")
# 4.2 Nitrate -------------------------------------------------------------
# Analyze nitrate as a function of population intensity
nitrate_PI_model <- lm(log10(mean_no3_mg_dm3) ~ log10(distance_weighted_population),
data = nutrients_meta_dist)
# View model results
summary(nitrate_PI_model)
# Plot linear model
nitrate_PI_plot <- ggplot(data = nutrients_meta_dist,
aes(x = log10(distance_weighted_population),
y = log10(mean_no3_mg_dm3))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("log10([Total Nitrate])") +
xlab("log10(IDW Population)") +
ggtitle("Nitrate vs. IDW Population") +
annotate("label", x = 3.00, y = -0.8,
label = paste0("p-value: ",
round(summary(nitrate_PI_model)$coefficients[2, 4], 3),
"\nR-squared: ",
round(summary(nitrate_PI_model)$r.squared, 3))) +
theme_minimal()
# Export plot
ggsave("nitrate_PI_plot.png", nitrate_PI_plot, device = "png",
path = "../figures", width = 18, height = 12, units = "in")
# 4.3 Ammonium ------------------------------------------------------------
# Analyze ammonium as a function of population intensity
ammonium_PI_model <- lm(log10(mean_nh4_mg_dm3) ~ log10(distance_weighted_population),
data = nutrients_meta_dist)
# View model results
summary(ammonium_PI_model)
# Plot linear model
ammonium_PI_plot <- ggplot(nutrients_meta_dist,
aes(x = log10(distance_weighted_population),
y = log10(mean_nh4_mg_dm3))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("log10([Total Ammonium])") +
xlab("log10(IDW Population)") +
ggtitle("Ammonium vs. IDW Population") +
annotate(geom = "label", x = 3.00, y = -1.25,
label = paste0("p-value: ",
round(summary(ammonium_PI_model)$coefficients[2, 4], 3),
"\nR-squared: ",
round(summary(ammonium_PI_model)$r.squared, 3))) +
theme_minimal()
# Export plot
ggsave(filename = "../figures/ammonium_PI_plot.png", plot = ammonium_PI_plot,
device = "png", width = 18, height = 12, units = "in")
# 5. Stable isotopes analysis ---------------------------------------------
# Join stable isotope data with metadata/distance and create custom metric
stable_isotopes_meta_dist <- full_join(x = stable_isotopes, y = metadata_dist,
by = "site")
# 5.1 N15 -----------------------------------------------------------------
# Analyze N15 as a function of population intensity
n15_PI_model <- lm(log10(N15) ~ log10(distance_weighted_population),
data = stable_isotopes_meta_dist[stable_isotopes$Genus != "Periphyton", ])
# View model results
summary(n15_PI_model)
# Plot linear model
n15_PI_plot <- ggplot(data = stable_isotopes_meta_dist[stable_isotopes$Genus != "Periphyton", ],
aes(x = log10(distance_weighted_population), y = log10(N15))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab(expression(paste("log10(",delta^{15}, "N (\u2030))"))) +
xlab("log10(IDW Population)") +
ggtitle(expression(paste(delta^{15}, "N \u2030  vs. IDW Population"))) +
xlim(c(2.75, 3.75)) +
annotate(geom = "label", x = 3.00, y = 0.89,
label = paste0("p-value: ",
round(summary(n15_PI_model)$coefficients[2, 4], 3),
"\nR-squared: ",
round(summary(n15_PI_model)$r.squared, 3))) +
theme_minimal()
# Export plot
ggsave(filename = "../figures/n15_PI_plot.png", plot = n15_PI_plot,
device = "png", width = 18, height = 12, units = "in")
# 5.2 C13 -----------------------------------------------------------------
# Analyze C13 as a function of population intensity
c13_PI_model <- lm((C13) ~ log10(distance_weighted_population),
data = stable_isotopes_meta_dist[stable_isotopes$Genus != "Periphyton", ])
# View model results
summary(c13_PI_model)
# Plot linear model
c13_PI_plot <- ggplot(stable_isotopes_meta_dist[stable_isotopes$Genus != "Periphyton", ],
aes(x = log10(distance_weighted_population), y = (C13))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab(expression(paste("log10(",delta^{13}, "C (\u2030))"))) +
xlab("log10(IDW Population)") +
ggtitle(expression(paste(delta^{13}, "C \u2030 vs. IDW Population"))) +
xlim(c(2.75, 3.75)) +
annotate(geom = "label", x = 3.00, y = -17,
label = paste0("p-value: ",
round(summary(c13_PI_model)$coefficients[2, 4], 3),
"\nR-squared: ",
round(summary(c13_PI_model)$r.squared, 3))) +
theme_minimal()
# Export plot
ggsave(filename = "../figures/c13_PI_plot.png", plot = c13_PI_plot,
device = "png", width = 18, height = 12, units = "in")
# 6. Chlorophyll a analysis -----------------------------------------------
# Join Chl a data with metadata/distance and create custom metric
chlorophylla_meta_dist <- full_join(x = chlorophylla, y = metadata_dist,
by = "site")
# Analyze chl a as a function of population intensity
chlorophylla_PI_model <- lm((mean_chlorophylla) ~ log10(distance_weighted_population),
data = chlorophylla_meta_dist)
# View model results
summary(chlorophylla_PI_model)
# Plot linear model
chlorophylla_PI_plot <- ggplot(data = chlorophylla_meta_dist,
aes(x = log10(distance_weighted_population),
y = (mean_chlorophylla))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("Chlorophyll a") +
xlab("log10(IDW Population)") +
ggtitle("Chlorophyll a vs. IDW Population") +
annotate(geom = "label", x = 4.00, y = 1.3,
label = paste0("p-value: ",
round(summary(chlorophylla_PI_model)$coefficients[2, 4], 3),
"\nR-squared: ",
round(summary(chlorophylla_PI_model)$r.squared, 3))) +
theme_minimal()
# Export plot
ggsave(filename = "../figures/chlorophylla_PI_plot.png",
plot = chlorophylla_PI_plot, device = "png", width = 18, height = 12,
units = "in")
# 7. Microplastics analysis -----------------------------------------------
# Format microplastics data before join
microplastics <- microplastics %>%
group_by(site) %>%
summarize(mean_total = mean(x = total_microplastics, na.rm = TRUE),
mean_density = mean(x = density, na.rm = TRUE),
mean_fragment_density = mean(x = fragment_density, na.rm = TRUE),
mean_fiber_density = mean(x = fiber_density, na.rm = TRUE),
mean_bead_density = mean(x = bead_density, na.rm = TRUE))
# Join microplastics data with metadata/distance and create custom metric
microplastics_meta_dist <- full_join(x = microplastics, y = metadata_dist,
by = "site")
# 7.1 Mean total microplastics --------------------------------------------
# Analyze mean total microplastics as a function of population intensity
microplastics_total_PI_model <- lm((mean_total) ~
log10(distance_weighted_population),
data = microplastics_meta_dist)
# View model results
summary(microplastics_total_PI_model)
# Plot linear model
microplastics_total_PI_plot <- ggplot(data = microplastics_meta_dist,
aes(x = log10(distance_weighted_population),
y = (mean_total))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("Mean Total Microplastics") +
xlab("log10(IDW Population)") +
ggtitle("Total Microplastics vs. IDW Population") +
annotate(geom = "label", x = 3.00, y = 5,
label = paste0("p-value: ",
round(summary(microplastics_total_PI_model)$coefficients[2, 4], 3),
"\nR-squared: ",
round(summary(microplastics_total_PI_model)$r.squared, 3))) +
theme_minimal()
# Export plot
ggsave(filename = "../figures/microplastics_total_PI_plot.png",
plot = microplastics_total_PI_plot, device = "png", width = 18,
height = 12, units = "in")
# 7.2 Mean microplastic density -------------------------------------------
# Analyze mean microplastic density as a function of population intensity
microplastics_density_PI_model <- lm((mean_density) ~
log10(distance_weighted_population),
data = microplastics_meta_dist)
# View model results
summary(microplastics_density_PI_model)
# Plot linear model
microplastics_density_PI_plot <- ggplot(data = microplastics_meta_dist,
aes(x = log10(distance_weighted_population),
y = (mean_density))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("Mean Microplastic Density") +
xlab("log10(IDW Population)") +
ggtitle("Microplastics Density vs. IDW Population") +
annotate(geom = "label", x = 3.65, y = 0.004,
label = paste0("p-value: ",
round(summary(microplastics_density_PI_model)$coefficients[2, 4], 3),
"\nR-squared: ",
round(summary(microplastics_density_PI_model)$r.squared, 3))) +
theme_minimal()
# Export plot
ggsave(filename = "../figures/microplastics_density_PI_plot.png",
plot = microplastics_density_PI_plot, device = "png", width = 18,
height = 12, units = "in")
# 8. Combine plots --------------------------------------------------------
ggarrange(ppcp_PI_plot, n15_PI_plot, phosphorus_PI_plot, chlorophylla_PI_plot,
nitrate_PI_plot, microplastics_total_PI_plot, ammonium_PI_plot,
microplastics_density_PI_plot, ncol = 2, nrow = 4, labels = "AUTO") %>%
ggexport(filename = "../figures/combined_plot.png",
height = 1900, width = 1200, res = 120)
stable_isotopes <- read.csv("../cleaned_data/stable_isotopes.csv",
header = TRUE)
low <- c("BGO-1", "BGO-2", "KD-1", "KD-2")
mod <- c("BGO-3", "BK-2", "BK-3", "MS-1")
high <- c("BK-1", "SM-1", "EM-1", "LI-3", "LI-2")
foodweb_plot <- stable_isotopes %>%
mutate(POP_GROUP = ifelse(Site %in% c(low, mod), "LOW/MOD", NA),
POP_GROUP = ifelse(Site %in% high, "HIGH", POP_GROUP),
Genus = as.character(Genus),
Genus = ifelse(Genus == "Sp.", "Periphyton", Genus)) %>%
unite(Taxon_Pop, c("Genus", "POP_GROUP"), sep = "+") %>%
filter(!grepl("NA", Taxon_Pop)) %>%
select(Taxon_Pop, C13, N15) %>%
group_by(Taxon_Pop) %>%
summarize(mean_N15 = mean(N15),
mean_C13 = mean(C13),
sd_N15 = sd(N15),
sd_C13 = sd(C13)) %>%
ggplot(aes(mean_C13, mean_N15, color = Taxon_Pop)) +
geom_point(size = 6) +
geom_errorbar(aes(ymin = mean_N15-sd_N15, ymax = mean_N15+sd_N15), size = 1) +
geom_errorbarh(aes(xmin = mean_C13-sd_C13, xmax = mean_C13+sd_C13), size = 1) +
labs(color = "Taxon + Distance-weighted Population") +
scale_color_viridis_d(begin = 0,
end = 0.9,
option = "magma") +
xlab("C13 %") +
ylab("N15 %") +
theme_minimal() +
theme(text = element_text(size = 16))
foodweb_plot <- stable_isotopes %>%
mutate(idw_group = ifelse(site %in% c(low, mod), "LOW/MOD", NA),
idw_group = ifelse(site %in% high, "HIGH", idw_group),
Genus = as.character(Genus)) %>%
unite(taxon_idw_pop, c("Genus", "idw_group"), sep = " + ") %>%
filter(!grepl("NA", taxon_idw_pop)) %>%
select(taxon_idw_pop, C13, N15) %>%
group_by(taxon_idw_pop) %>%
summarize(mean_N15 = mean(N15),
mean_C13 = mean(C13),
sd_N15 = sd(N15),
sd_C13 = sd(C13)) %>%
ggplot(aes(mean_C13, mean_N15, color = taxon_idw_pop)) +
geom_point(size = 6) +
geom_errorbar(aes(ymin = mean_N15-sd_N15, ymax = mean_N15+sd_N15), size = 1) +
geom_errorbarh(aes(xmin = mean_C13-sd_C13, xmax = mean_C13+sd_C13), size = 1) +
labs(color = "Taxon + IDW Population") +
scale_color_viridis_d(begin = 0,
end = 0.9,
option = "magma") +
xlab("C13 %") +
ylab("N15 %") +
theme_minimal() +
theme(text = element_text(size = 16))
foodweb_plot
foodweb_plot <- stable_isotopes %>%
mutate(idw_group = ifelse(site %in% c(low, mod), "LOW/MOD", NA),
idw_group = ifelse(site %in% high, "HIGH", idw_group),
Genus = as.character(Genus)) %>%
unite(taxon_idw_pop, c("Genus", "idw_group"), sep = " + ") %>%
filter(!grepl("NA", taxon_idw_pop)) %>%
select(taxon_idw_pop, C13, N15) %>%
group_by(taxon_idw_pop) %>%
summarize(mean_N15 = mean(N15),
mean_C13 = mean(C13),
sd_N15 = sd(N15),
sd_C13 = sd(C13)) %>%
ggplot(aes(mean_C13, mean_N15, color = taxon_idw_pop)) +
geom_point(size = 6) +
geom_errorbar(aes(ymin = mean_N15-sd_N15, ymax = mean_N15+sd_N15), size = 1) +
geom_errorbarh(aes(xmin = mean_C13-sd_C13, xmax = mean_C13+sd_C13), size = 1) +
labs(color = "Taxon + IDW Population") +
scale_color_viridis_d(begin = 0,
end = 0.9,
option = "magma") +
xlab(expression(paste(delta^{13}, "C (\u2030)"))) +
ylab(expression(paste(delta^{15}, "N (\u2030)"))) +
theme_minimal() +
theme(text = element_text(size = 16))
foodweb_plot
foodweb_plot <- stable_isotopes %>%
mutate(idw_group = ifelse(site %in% c(low, mod), "LOW/MOD", NA),
idw_group = ifelse(site %in% high, "HIGH", idw_group),
Genus = as.character(Genus)) %>%
unite(taxon_idw_pop, c("Genus", "idw_group"), sep = " + ") %>%
filter(!grepl("NA", taxon_idw_pop)) %>%
select(taxon_idw_pop, C13, N15) %>%
group_by(taxon_idw_pop) %>%
summarize(mean_N15 = mean(N15),
mean_C13 = mean(C13),
sd_N15 = sd(N15),
sd_C13 = sd(C13)) %>%
ggplot(aes(mean_C13, mean_N15, color = taxon_idw_pop)) +
geom_point(size = 6) +
geom_errorbar(aes(ymin = mean_N15-sd_N15, ymax = mean_N15+sd_N15), size = 1) +
geom_errorbarh(aes(xmin = mean_C13-sd_C13, xmax = mean_C13+sd_C13), size = 1) +
labs(color = "Taxon + IDW Population Group") +
scale_color_viridis_d(begin = 0,
end = 0.9,
option = "magma") +
xlab(expression(paste(delta^{13}, "C (\u2030)"))) +
ylab(expression(paste(delta^{15}, "N (\u2030)"))) +
theme_minimal() +
theme(text = element_text(size = 16))
ggsave("../figures/stable_isotopes_biplot.png", foodweb_plot,
device = "png", width = 9, height = 6, units = "in")
total_lipid_orig <- read.csv(file = "../original_data/Baikal.total.lipid.mfm.20180322.csv",
header = TRUE)
library(tidyverse)
library(lubridate)
library(stringr)
library(janitor)
library(sf)
library(spdplyr)
stable_isotopes_orig <- read.csv(file = "../original_data/sia_results_mfm_20170509.csv",
header = TRUE)
# Parse identifier data into site and taxonomic data
# In this analysis, "Splash zone" was used as the shorthand
# for periphyton. We relabel "Splash zone" as periphyton as such.
stable_isotopes <- stable_isotopes_orig %>%
separate(col = Identifier, into = c("site", "Genus", "Species"), sep = " ") %>%
mutate(Genus = ifelse(test = Genus == "E.",
yes = "Eulimnogammarus", Genus),
Genus = ifelse(test = Genus == "P.",
yes = "Pallasea", no = Genus),
Genus = ifelse(test = Genus == "Sp.",
yes = "Periphyton", no = Genus),
Species = ifelse(test = Species == "can",
yes = "cancellus", no = Species),
Species = ifelse(test = Species == "ver",
yes = "verrucosus", no = Species),
Species = ifelse(test = Species == "vitetus",
yes = "vittatus", no = Species),
Species = ifelse(test = Species == "veruossus",
yes = "verrucosus", no = Species),
Species = ifelse(test = Species == "cyan",
yes = "cyaneus", no = Species),
Species = ifelse(test = Species == "zone",
yes = NA, no = Species))
head(stable_isotopes)
write.csv(x = stable_isotopes, file = "../clean_disaggregated_data/stable_isotopes.csv",
row.names = FALSE)
fatty_acid_orig <- read.csv(file = "../original_data/BaikalFAs_wt_20180322.csv",
header = TRUE)
# Parse spp column into taxonomic data
fatty_acid <- fatty_acid_orig %>%
clean_names() %>%
select(-gc_id, -sample) %>%
separate(col = spp, into = c("Genus", "Species")) %>%
mutate(Genus = ifelse(test = Genus == "E" & Species == "ver",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "vitatus",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "cyan",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "P" & Species == "can",
yes = "Pallasea", no = Genus),
Genus = ifelse(test = Genus == "Spl",
yes = "Periphyton", no = Genus),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "ver",
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "vitatus",
yes = "vittatus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "cyan",
yes = "cyaneus", no = Species),
Species = ifelse(test = Genus == "Pallasea" & Species == "can",
yes = "cancellus", no = Species),
Species = ifelse(test = Species == "zone",
yes = NA, no = Species)) %>%
rename(site = location) %>%
select(site:c24_0)
head(fatty_acid)
# Parse spp column into taxonomic data
fatty_acid <- fatty_acid_orig %>%
clean_names() %>%
select(-gc_id, -sample) %>%
separate(col = spp, into = c("Genus", "Species")) %>%
mutate(Genus = ifelse(test = Genus == "E" & Species == "ver",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "vitatus",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "cyan",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "P" & Species == "can",
yes = "Pallasea", no = Genus),
Genus = ifelse(test = Genus == "Spl",
yes = "Periphyton", no = Genus),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "ver",
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "vitatus",
yes = "vittatus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "cyan",
yes = "cyaneus", no = Species),
Species = ifelse(test = Genus == "Pallasea" & Species == "can",
yes = "cancellus", no = Species),
Species = ifelse(test = Species == "zone",
yes = NA, no = Species)) %>%
rename(site = location) %>%
select(site:c24_0, comments)
head(fatty_acid)
write.csv(x = fatty_acid, file = "../clean_disaggregated_data/fatty_acid.csv",
row.names = FALSE)
total_lipid_orig <- read.csv(file = "../original_data/Baikal.total.lipid.mfm.20180322.csv",
header = TRUE)
# Parse sample.id column into site and taxonomic data
total_lipid <- total_lipid_orig %>%
select(-sample.num) %>%
separate(col = sample.id, into = c("site", "SPP"), sep = "\\,") %>%
separate(col = SPP, into = c("Genus", "Species"), sep = "[.]") %>%
mutate(Genus = ifelse(test = Genus == " E",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "ver",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "vitatus",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "cyan",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == " P" & Species == "can",
yes = "Pallasea", no = Genus),
Genus = ifelse(test = Genus == " Spl",
yes = "Periphyton", no = Genus),
Genus = ifelse(test = grepl(pattern = "Drapa", x = Genus),
yes = "Drapa", no = Genus),
Genus = ifelse(test = grepl(pattern = "Hyalella", x = Genus),
yes = "Hyalella", no = Genus),
Genus = ifelse(test = grepl(pattern = "Snails", x = Genus),
yes = "Snails", no = Genus),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "ver",
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "ever",
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & grepl(pattern = "verucossus", x = Species),
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & grepl(pattern = "vitatus", x = Species),
yes = "vitatus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "cyan",
yes = "cyaneus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & grepl(pattern = "cyan", x = Species),
yes = "cyaneus", no = Species),
Species = ifelse(test = Genus == "Pallasea" & Species == "can",
yes = "cancellus", no = Species),
Species = ifelse(test = Species == "zone",
yes = NA, no = Species)) %>%
rename(total_lipid_mg_per_g = total.lipid.mg.g)
head(total_lipid)
write.csv(x = total_lipid, file = "../clean_disaggregated_data/total_lipid.csv",
row.names = FALSE)
fatty_acid_orig <- read.csv(file = "../clean_disaggregated_data/fatty_acid.csv",
header = TRUE)
fatty_acids <- fatty_acid_orig %>%
select(-comments)
head(fatty_acid_orig)
head(fatty_acids)
write.csv(x = fatty_acids, file = "../cleaned_data/fatty_acid.csv",
row.names = FALSE)
stable_isotopes_orig <- read.csv(file = "../clean_disaggregated_data/stable_isotopes.csv",
header = TRUE)
stable_isotopes <- stable_isotopes_orig %>%
select(-comments)
head(stable_isotopes)
write.csv(x = stable_isotopes, file = "../cleaned_data/stable_isotopes.csv",
row.names = FALSE)
