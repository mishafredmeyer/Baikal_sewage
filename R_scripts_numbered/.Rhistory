# Additionally, hyallela_cziarnianski was misidentified in some samples. Rather than
# potentially erroneously include those counts, we remove this taxon.
# LI-3 was partitioned into two samples due to the high number of individuals.
# This step combines that replicate into one row.
inverts_summarized <- inverts_orig %>%
select(-X) %>%
gather(key = Site, value = Count, MS1.3:BK1.3) %>%
rename(Taxon = Invertebrate) %>%
mutate(Site = gsub(pattern = ".", replacement = "_", x = Site, fixed = TRUE),
Taxon = gsub(pattern = " ", replacement = "_", x = Taxon),
Count = ifelse(test = is.na(Count), yes = 0, no = Count)) %>%
separate(col = Site, into = c("Location", "Replicate", "Duplicate"),
remove = FALSE) %>%
filter(!(Taxon %in% c("Propapaidae", "choronomids_", "hyallela_cziarnianski_"))) %>%
mutate(Taxon = ifelse(test = grepl(pattern = "Brandtia_latissima", x = Taxon),
yes = "Brandtia_latissima", no = Taxon),
Replicate = ifelse(test = Replicate %in% c("1B1", "1B2"),
yes = "1", no = Replicate)) %>%
group_by(Location, Replicate, Duplicate, Taxon) %>%
summarize(sum_Count = sum(Count)) %>%
ungroup()
# Take mean counts by taxon, flesh out taxonomic info, spread to wide format
inverts_wide <- inverts_summarized %>%
group_by(Location, Taxon, Replicate) %>%
summarize(mean_Count = mean(sum_Count)) %>%
separate(col = Taxon, into = c("Genus", "Species", "Subspecies")) %>%
mutate(Genus = ifelse(test = Genus == "E",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "Eulimno",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "flatworms_",
yes = "Flatworms", no = Genus),
Genus = ifelse(test = Genus == "caddisflies",
yes = "Caddisflies", no = Genus),
Genus = ifelse(test = Genus == "pallasea",
yes = "Pallasea", no = Genus),
Genus = ifelse(test = Genus == "hyallela",
yes = "Hyallela", no = Genus),
Genus = ifelse(test = Genus == "poekilo",
yes = "Poekilogammarus", no = Genus),
Genus = ifelse(test = Genus == "Poekilo",
yes = "Poekilogammarus", no = Genus),
Genus = ifelse(test = Genus == "valvatidae",
yes = "Valvatidae", no = Genus),
Species = ifelse(test = Species == "spp",
yes = NA, no = Species)) %>%
unite(col = "Taxon", Genus, Species, Subspecies) %>%
mutate(Taxon = gsub(pattern = "_NA_NA", replacement = "", x = Taxon),
Taxon = gsub(pattern = "_NA", replacement = "", x = Taxon),
Taxon = ifelse(test = Taxon == "flatworms_",
yes = "Flatworms", no = Taxon)) %>%
spread(key = Taxon, value = mean_Count) %>%
select(-Total) %>%
separate(col = Location, into = c("Location", "Number"), sep = -1) %>%
unite(col = "Site", Location, Number, sep = "-")
head(inverts_wide)
write.csv(x = inverts_wide, file = "../clean_disaggregated_data/invertebrates.csv",
row.names = FALSE)
periphyton_orig <- read.csv(file = "../original_data/periphyton_20180917.csv",
header = TRUE)
# Make long format, take mean counts by taxon
periphyton_summarized <- periphyton_orig %>%
select(-date, -rep, -contains("filament"), -Lyngbya) %>%
filter(!is.na(diatom)) %>%
gather(key = TAXON, value = COUNT, diatom:desmidales) %>%
mutate(TAXON = ifelse(test = TAXON == "tetraporales",
yes = "tetrasporales", no = TAXON)) %>%
group_by(Site = site, TAXON) %>%
summarize(MEAN = mean(COUNT)) %>%
ungroup()
periphyton_orig
# Make long format, take mean counts by taxon
periphyton_summarized <- periphyton_orig %>%
rename("Site" = "site",
"Replicate" = "rep",
"subsamples_counted" = "counts") %>%
select(-date) %>%
clean_names()
periphyton_summarized
# Make long format, take mean counts by taxon
periphyton_summarized <- periphyton_orig %>%
rename("Site" = "site",
"Replicate" = "rep",
"subsamples_counted" = "counts") %>%
separate(col = Site, into = c("Location", "Number"), sep = -1) %>%
unite(col = "Site", Location, Number, sep = "-")
# Make long format, take mean counts by taxon
periphyton_summarized <- periphyton_orig %>%
rename("Site" = "site",
"Replicate" = "rep",
"subsamples_counted" = "counts") %>%
separate(col = Site, into = c("Location", "Number"), sep = -1) %>%
unite(col = "Site", Location, Number, sep = "-") %>%
select(-date) %>%
clean_names()
periphyton_summarized
write.csv(x = periphyton_wide, file = "../clean_disaggregated_data/periphyton.csv",
row.names = FALSE)
# Make long format, take mean counts by taxon
periphyton_wide <- periphyton_orig %>%
rename("Site" = "site",
"Replicate" = "rep",
"subsamples_counted" = "counts") %>%
separate(col = Site, into = c("Location", "Number"), sep = -1) %>%
unite(col = "Site", Location, Number, sep = "-") %>%
select(-date) %>%
clean_names()
head(periphyton_wide)
write.csv(x = periphyton_wide, file = "../clean_disaggregated_data/periphyton.csv",
row.names = FALSE)
stable_isotopes_orig <- read.csv(file = "../original_data/sia_results_mfm_20170509.csv",
header = TRUE)
stable_isotopes_orig
# Parse identifier data into site and taxonomic data
stable_isotopes <- stable_isotopes_orig %>%
separate(col = Identifier, into = c("Site", "Genus", "Species"), sep = " ") %>%
mutate(Genus = ifelse(test = Genus == "E.",
yes = "Eulimnogammarus", Genus),
Genus = ifelse(test = Genus == "P.",
yes = "Pallasea", no = Genus),
Species = ifelse(test = Species == "can",
yes = "cancellus", no = Species),
Species = ifelse(test = Species == "ver",
yes = "verrucosus", no = Species),
Species = ifelse(test = Species == "vitetus",
yes = "vitatus", no = Species),
Species = ifelse(test = Species == "veruossus",
yes = "verrucosus", no = Species),
Species = ifelse(test = Species == "cyan",
yes = "cyaneus", no = Species),
Species = ifelse(test = Species == "Sp.",
yes = "Splash", no = Species))
head(stable_isotopes)
unique(stable_isotopes$Genus)
unique(stable_isotopes$Species)
# Parse identifier data into site and taxonomic data
stable_isotopes <- stable_isotopes_orig %>%
separate(col = Identifier, into = c("Site", "Genus", "Species"), sep = " ") %>%
mutate(Genus = ifelse(test = Genus == "E.",
yes = "Eulimnogammarus", Genus),
Genus = ifelse(test = Genus == "P.",
yes = "Pallasea", no = Genus),
Genus = ifelse(test = Genus == "Sp.",
yes = "Periphyton", no = Genus),
Species = ifelse(test = Species == "can",
yes = "cancellus", no = Species),
Species = ifelse(test = Species == "ver",
yes = "verrucosus", no = Species),
Species = ifelse(test = Species == "vitetus",
yes = "vitatus", no = Species),
Species = ifelse(test = Species == "veruossus",
yes = "verrucosus", no = Species),
Species = ifelse(test = Species == "cyan",
yes = "cyaneus", no = Species),
Species = ifelse(test = Species == "zone",
yes = NA, no = Species))
head(stable_isotopes)
View(stable_isotopes)
write.csv(x = stable_isotopes, file = "../clean_disaggregated_data/stable_isotopes.csv",
row.names = FALSE)
fatty_acid_orig <- read.csv(file = "../original_data/BaikalFAs_wt_20180322.csv",
header = TRUE)
# Parse spp column into taxonomic data
fatty_acid <- fatty_acid_orig %>%
select(-GC_ID, -sample.) %>%
separate(col = spp, into = c("Genus", "Species")) %>%
mutate(Genus = ifelse(test = Genus == "E" & Species == "ver",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "vitatus",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "cyan",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "P" & Species == "can",
yes = "Pallasea", no = Genus),
Genus = ifelse(test = Genus == "Spl" & Species == "zone",
yes = "Splash", no = Genus),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "ver",
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "cyan",
yes = "cyaneus", no = Species),
Species = ifelse(test = Genus == "Pallasea" & Species == "can",
yes = "cancellus", no = Species),
Species = ifelse(test = Genus == "Spl" & Species == "zone",
yes = "Zone", no = Species)) %>%
rename(Site = location)
head(fatty_acid)
# Parse spp column into taxonomic data
fatty_acid <- fatty_acid_orig %>%
select(-GC_ID, -sample.) %>%
separate(col = spp, into = c("Genus", "Species")) %>%
mutate(Genus = ifelse(test = Genus == "E" & Species == "ver",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "vitatus",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "cyan",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "P" & Species == "can",
yes = "Pallasea", no = Genus),
Genus = ifelse(test = Genus == "Spl",
yes = "Periphyton", no = Genus),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "ver",
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "cyan",
yes = "cyaneus", no = Species),
Species = ifelse(test = Genus == "Pallasea" & Species == "can",
yes = "cancellus", no = Species),
Species = ifelse(test = Species == "zone",
yes = NA, no = Species)) %>%
rename(Site = location)
head(fatty_acid)
View(fatty_acid)
write.csv(x = fatty_acid, file = "../clean_disaggregated_data/fatty_acid.csv",
row.names = FALSE)
total_lipid_orig <- read.csv(file = "../original_data/Baikal.total.lipid.mfm.20180322.csv",
header = TRUE)
# Parse sample.id column into site and taxonomic data
total_lipid <- total_lipid_orig %>%
select(-sample.num) %>%
separate(col = sample.id, into = c("Site", "SPP"), sep = "\\,") %>%
separate(col = SPP, into = c("Genus", "Species"), sep = "[.]") %>%
mutate(Genus = ifelse(test = Genus == " E",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "ver",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "vitatus",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "cyan",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == " P" & Species == "can",
yes = "Pallasea", no = Genus),
Genus = ifelse(test = Genus == " Spl" & Species == "zone",
yes = "Splash", no = Genus),
Genus = ifelse(test = grepl(pattern = "Drapa", x = Genus),
yes = "Drapa", no = Genus),
Genus = ifelse(test = grepl(pattern = "Hyalella", x = Genus),
yes = "Hyalella", no = Genus),
Genus = ifelse(test = grepl(pattern = "Snails", x = Genus),
yes = "Snails", no = Genus),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "ver",
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "ever",
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & grepl(pattern = "verucossus", x = Species),
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & grepl(pattern = "vitatus", x = Species),
yes = "vitatus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "cyan",
yes = "cyaneus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & grepl(pattern = "cyan", x = Species),
yes = "cyaneus", no = Species),
Species = ifelse(test = Genus == "Pallasea" & Species == "can",
yes = "cancellus", no = Species),
Species = ifelse(test = Genus == "Spl" & Species == "zone",
yes = "Zone", no = Species)) %>%
rename(total_lipid_mg_per_g = total.lipid.mg.g)
head(total_lipid)
# Parse sample.id column into site and taxonomic data
total_lipid <- total_lipid_orig %>%
select(-sample.num) %>%
separate(col = sample.id, into = c("Site", "SPP"), sep = "\\,") %>%
separate(col = SPP, into = c("Genus", "Species"), sep = "[.]") %>%
mutate(Genus = ifelse(test = Genus == " E",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "ver",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "vitatus",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == "E" & Species == "cyan",
yes = "Eulimnogammarus", no = Genus),
Genus = ifelse(test = Genus == " P" & Species == "can",
yes = "Pallasea", no = Genus),
Genus = ifelse(test = Genus == " Spl",
yes = "Periphyton", no = Genus),
Genus = ifelse(test = grepl(pattern = "Drapa", x = Genus),
yes = "Drapa", no = Genus),
Genus = ifelse(test = grepl(pattern = "Hyalella", x = Genus),
yes = "Hyalella", no = Genus),
Genus = ifelse(test = grepl(pattern = "Snails", x = Genus),
yes = "Snails", no = Genus),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "ver",
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "ever",
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & grepl(pattern = "verucossus", x = Species),
yes = "verrucosus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & grepl(pattern = "vitatus", x = Species),
yes = "vitatus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & Species == "cyan",
yes = "cyaneus", no = Species),
Species = ifelse(test = Genus == "Eulimnogammarus" & grepl(pattern = "cyan", x = Species),
yes = "cyaneus", no = Species),
Species = ifelse(test = Genus == "Pallasea" & Species == "can",
yes = "cancellus", no = Species),
Species = ifelse(test = Species == "zone",
yes = NA, no = Species)) %>%
rename(total_lipid_mg_per_g = total.lipid.mg.g)
head(total_lipid)
write.csv(x = total_lipid, file = "../clean_disaggregated_data/total_lipid.csv",
row.names = FALSE)
microplastics_orig <- read.csv(file = "../original_data/microplastics_mfm_20171010.csv",
header = TRUE)
microplastics_orig
# Run microplastics post-processing calcs, then average by site
microplastics <- microplastics_orig %>%
select(-date) %>%
unite(col = "Site", location, site, sep = "-")
microplastics
View(microplastics)
View(microplastics)
# Run microplastics post-processing calcs, then average by site
microplastics <- microplastics_orig %>%
select(-date) %>%
unite(col = "Site", location, site, sep = "-") %>%
mutate(volume_filtered_mL = volume * volume_rep)
# Run microplastics post-processing calcs, then average by site
microplastics <- microplastics_orig %>%
select(-date) %>%
unite(col = "Site", location, site, sep = "-") %>%
mutate(volume_filtered_mL = volume * volume_rep) %>%
select(-volume, -volume_rep)
microplastics
write.csv(x = microplastics, file = "../clean_disaggregated_data/microplastics.csv",
row.names = FALSE)
distance_orig <- read.csv(file = "../original_data/baikal_site_distances_mfm_20180517.csv",
header = TRUE)
baikal_shapefile <- sf::st_read(dsn = "../clean_disaggregated_data/Baikal_shapefile.kml")
metadata <- read.csv(file = "../clean_disaggregated_data/metadata.csv",
header = TRUE, stringsAsFactors = FALSE)
loc_areas <- baikal_shapefile %>%
filter(!grepl("shoreline", Name)) %>%
st_area() %>%
enframe(name = NULL) %>%
rename(development_area_m2 = value) %>%
mutate(development_area_m2 = as.numeric(development_area_m2),
development_area_km2 = development_area_m2 / 1000000) %>%
cbind(baikal_shapefile$Name) %>%
rename(Site = `baikal_shapefile$Name`) %>%
mutate(Site = as.character(Site),
Site = ifelse(test = Site == "Bolshoe Goloustnoe",
yes = "BGO", no = Site),
Site = ifelse(test = Site == "Bolshie Koty",
yes = "BK", no = Site),
Site = ifelse(test = Site == "Listvyanka",
yes = "LI", no = Site)) %>%
filter(Site %in% c("BK", "LI", "BGO"))
library(sf)
library(spdplyr)
loc_areas <- baikal_shapefile %>%
filter(!grepl("shoreline", Name)) %>%
st_area() %>%
enframe(name = NULL) %>%
rename(development_area_m2 = value) %>%
mutate(development_area_m2 = as.numeric(development_area_m2),
development_area_km2 = development_area_m2 / 1000000) %>%
cbind(baikal_shapefile$Name) %>%
rename(Site = `baikal_shapefile$Name`) %>%
mutate(Site = as.character(Site),
Site = ifelse(test = Site == "Bolshoe Goloustnoe",
yes = "BGO", no = Site),
Site = ifelse(test = Site == "Bolshie Koty",
yes = "BK", no = Site),
Site = ifelse(test = Site == "Listvyanka",
yes = "LI", no = Site)) %>%
filter(Site %in% c("BK", "LI", "BGO"))
shoreline_names <- baikal_shapefile %>%
filter(grepl(pattern = "shoreline", x = Name)) %>%
as_tibble()
loc_shoreline_area_length <- baikal_shapefile %>%
filter(grepl("shoreline", Name)) %>%
st_length() %>%
as_tibble() %>%
rename(development_shoreline_length_m = value) %>%
mutate(development_shoreline_length_m = as.numeric(development_shoreline_length_m),
development_shoreline_length_km = development_shoreline_length_m / 1000) %>%
cbind(shoreline_names$Name) %>%
rename(Site = `shoreline_names$Name`) %>%
mutate(Site = as.character(Site),
Site = ifelse(grepl("Bolshoe Goloustnoe", Site), "BGO", Site),
Site = ifelse(grepl("Bolshie Koty", Site), "BK", Site),
Site = ifelse(grepl("Listvyanka", Site), "LI", Site)) %>%
filter(Site %in% c("BK", "LI", "BGO")) %>%
full_join(x = ., y = loc_areas, by = c("Site"))
baikal_shapefile$centroids <- st_centroid(x = baikal_shapefile)
site_loc <- metadata %>%
dplyr::select(Site, lat, long)
site_loc_pts <- st_as_sf(site_loc[, 2:3], coords = c("long", "lat"),
crs = 4326)
locs_centroids <- st_distance(x = site_loc_pts,
y = baikal_shapefile$centroids$geometry[1:3]) %>%
as_tibble() %>%
rename(BGO = V1,
BK = V2,
LI = V3) %>%
mutate(BGO = as.numeric(BGO),
BK = as.numeric(BK),
LI = as.numeric(LI)) %>%
cbind(., site_loc) %>%
gather(key = nearest_neighbor, value = distance, BGO:LI) %>%
group_by(Site, lat, long) %>%
mutate(distance_km = distance / 1000,
population = ifelse(test = nearest_neighbor == "BGO",
yes = 600, no = NA),
population = ifelse(test = nearest_neighbor == "BK",
yes = 80, no = population),
population = ifelse(test = nearest_neighbor == "LI",
yes = 5000, no = population)) %>%
left_join(x = ., y = loc_shoreline_area_length,
by = c("nearest_neighbor" = "Site")) %>%
mutate(distance_weighted_population = ((population * development_shoreline_length_km) /
development_area_km2) / distance_km) %>%
group_by(Site) %>%
summarize(distance_weighted_population = sum(distance_weighted_population)) %>%
arrange(distance_weighted_population)
locs_centroids <- st_distance(x = site_loc_pts,
y = baikal_shapefile$centroids$geometry[1:3]) %>%
as_tibble() %>%
rename(BGO = V1,
BK = V2,
LI = V3) %>%
mutate(BGO = as.numeric(BGO),
BK = as.numeric(BK),
LI = as.numeric(LI)) %>%
cbind(., site_loc) %>%
gather(key = nearest_neighbor, value = distance, BGO:LI) %>%
group_by(Site, lat, long) %>%
mutate(distance_km = distance / 1000,
population = ifelse(test = nearest_neighbor == "BGO",
yes = 600, no = NA),
population = ifelse(test = nearest_neighbor == "BK",
yes = 80, no = population),
population = ifelse(test = nearest_neighbor == "LI",
yes = 5000, no = population)) %>%
left_join(x = ., y = loc_shoreline_area_length,
by = c("nearest_neighbor" = "Site")) %>%
mutate(distance_weighted_population = ((population * development_shoreline_length_km) /
development_area_km2) / distance_km) %>%
group_by(Site) %>%
summarize(distance_weighted_population = sum(distance_weighted_population)) %>%
arrange(distance_weighted_population)
site_loc_pts <- st_as_sf(site_loc[, 2:3], coords = c("long", "lat"),
crs = 4326)
site_loc <- metadata %>%
dplyr::select(Site, lat, long)
metadata
site_loc <- metadata %>%
dplyr::select(site, lat, long)
site_loc_pts <- st_as_sf(site_loc[, 2:3], coords = c("long", "lat"),
crs = 4326)
locs_centroids <- st_distance(x = site_loc_pts,
y = baikal_shapefile$centroids$geometry[1:3]) %>%
as_tibble() %>%
rename(BGO = V1,
BK = V2,
LI = V3) %>%
mutate(BGO = as.numeric(BGO),
BK = as.numeric(BK),
LI = as.numeric(LI)) %>%
cbind(., site_loc) %>%
gather(key = nearest_neighbor, value = distance, BGO:LI) %>%
group_by(Site, lat, long) %>%
mutate(distance_km = distance / 1000,
population = ifelse(test = nearest_neighbor == "BGO",
yes = 600, no = NA),
population = ifelse(test = nearest_neighbor == "BK",
yes = 80, no = population),
population = ifelse(test = nearest_neighbor == "LI",
yes = 5000, no = population)) %>%
left_join(x = ., y = loc_shoreline_area_length,
by = c("nearest_neighbor" = "Site")) %>%
mutate(distance_weighted_population = ((population * development_shoreline_length_km) /
development_area_km2) / distance_km) %>%
group_by(Site) %>%
summarize(distance_weighted_population = sum(distance_weighted_population)) %>%
arrange(distance_weighted_population)
site_loc <- metadata %>%
dplyr::select("Site" = site, lat, long)
site_loc_pts <- st_as_sf(site_loc[, 2:3], coords = c("long", "lat"),
crs = 4326)
locs_centroids <- st_distance(x = site_loc_pts,
y = baikal_shapefile$centroids$geometry[1:3]) %>%
as_tibble() %>%
rename(BGO = V1,
BK = V2,
LI = V3) %>%
mutate(BGO = as.numeric(BGO),
BK = as.numeric(BK),
LI = as.numeric(LI)) %>%
cbind(., site_loc) %>%
gather(key = nearest_neighbor, value = distance, BGO:LI) %>%
group_by(Site, lat, long) %>%
mutate(distance_km = distance / 1000,
population = ifelse(test = nearest_neighbor == "BGO",
yes = 600, no = NA),
population = ifelse(test = nearest_neighbor == "BK",
yes = 80, no = population),
population = ifelse(test = nearest_neighbor == "LI",
yes = 5000, no = population)) %>%
left_join(x = ., y = loc_shoreline_area_length,
by = c("nearest_neighbor" = "Site")) %>%
mutate(distance_weighted_population = ((population * development_shoreline_length_km) /
development_area_km2) / distance_km) %>%
group_by(Site) %>%
summarize(distance_weighted_population = sum(distance_weighted_population)) %>%
arrange(distance_weighted_population)
locs_centroids
write.csv(x = locs_centroids,
file = "../clean_disaggregated_data/distance_weighted_population_metrics.csv",
row.names = FALSE)
